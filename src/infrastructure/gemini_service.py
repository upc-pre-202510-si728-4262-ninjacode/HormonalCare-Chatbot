import google.generativeai as genai
from typing import Dict, Any
import json
import os
from dotenv import load_dotenv

load_dotenv()

class GeminiService:
    """Servicio para interactuar con Google Gemini AI"""
    
    def __init__(self):
        self.api_key = os.getenv('GEMINI_API_KEY')
        if not self.api_key:
            raise ValueError("GEMINI_API_KEY no est√° configurada en las variables de entorno")
        
        genai.configure(api_key=self.api_key)
        
        # Usar el modelo m√°s avanzado disponible
        # Opciones: 'gemini-1.5-pro', 'gemini-1.5-flash', 'gemini-pro'
        model_name = os.getenv('GEMINI_MODEL', 'gemini-1.5-pro')
        self.model = genai.GenerativeModel(model_name)
        
        print(f"ü§ñ Usando modelo Gemini: {model_name}")
    
    def analyze_blood_test_with_ai(self, blood_test_data: Dict[str, Any], 
                                  user_data: Dict[str, Any], 
                                  analysis: Dict[str, Any]) -> str:
        """
        Usa Gemini para generar una explicaci√≥n detallada del an√°lisis de sangre
        """
        prompt = self._create_analysis_prompt(blood_test_data, user_data, analysis)
        
        try:
            response = self.model.generate_content(prompt)
            return response.text
        except Exception as e:
            return f"Error al generar an√°lisis con IA: {str(e)}"
    
    def chat_with_user(self, user_message: str, blood_test_data: Dict[str, Any], 
                      user_data: Dict[str, Any], analysis: Dict[str, Any]) -> str:
        """
        Maneja la conversaci√≥n del chatbot con el usuario
        """
        prompt = self._create_chat_prompt(user_message, blood_test_data, user_data, analysis)
        
        try:
            response = self.model.generate_content(prompt)
            return response.text
        except Exception as e:
            return "Lo siento, hubo un error al procesar tu consulta. Por favor intenta de nuevo."
    
    def _create_analysis_prompt(self, blood_test_data: Dict[str, Any], 
                               user_data: Dict[str, Any], 
                               analysis: Dict[str, Any]) -> str:
        """Crea el prompt para an√°lisis de examen de sangre"""
        
        return f"""
Eres un asistente m√©dico virtual especializado en an√°lisis de ex√°menes de sangre. 
Analiza los siguientes resultados y proporciona una explicaci√≥n clara y comprensible para el paciente.

DATOS DEL PACIENTE:
- Nombre: {user_data.get('name', 'Paciente')}
- Edad: {user_data.get('age')} a√±os
- G√©nero: {user_data.get('gender')}

RESULTADOS DEL EXAMEN:
- Glucosa: {blood_test_data.get('glucose')} mg/dL
- Colesterol total: {blood_test_data.get('cholesterol')} mg/dL
- HDL (colesterol bueno): {blood_test_data.get('hdl_cholesterol')} mg/dL
- LDL (colesterol malo): {blood_test_data.get('ldl_cholesterol')} mg/dL
- Triglic√©ridos: {blood_test_data.get('triglycerides')} mg/dL
- Hemoglobina: {blood_test_data.get('hemoglobin')} g/dL
- Hematocrito: {blood_test_data.get('hematocrit')}%
- Gl√≥bulos blancos: {blood_test_data.get('white_blood_cells')}/ŒºL
- Gl√≥bulos rojos: {blood_test_data.get('red_blood_cells')} millones/ŒºL
- Plaquetas: {blood_test_data.get('platelets')}/ŒºL
- Creatinina: {blood_test_data.get('creatinine')} mg/dL
- Urea: {blood_test_data.get('urea')} mg/dL

AN√ÅLISIS AUTOMATIZADO:
- Riesgo general: {analysis.get('overall_risk')}
- Estado de glucosa: {analysis.get('glucose_status')}
- Estado del colesterol: {analysis.get('cholesterol_status')}
- Funci√≥n renal: {analysis.get('kidney_function_status')}
- Hemograma: {analysis.get('blood_count_status')}
- Necesita consulta m√©dica: {'S√≠' if analysis.get('needs_doctor_consultation') else 'No'}

INSTRUCCIONES:
1. Explica los resultados de manera clara y sin usar jerga m√©dica excesiva
2. Enf√≥cate en los valores que est√°n fuera del rango normal
3. Proporciona contexto sobre qu√© significan estos valores para la salud
4. Mant√©n un tono tranquilizador pero honesto
5. Siempre recuerda que esto no reemplaza una consulta m√©dica
6. Responde en espa√±ol
7. Estructura tu respuesta de manera organizada y f√°cil de leer

Por favor, proporciona un an√°lisis detallado y comprensible de estos resultados.
"""

    def _create_chat_prompt(self, user_message: str, blood_test_data: Dict[str, Any], 
                           user_data: Dict[str, Any], analysis: Dict[str, Any]) -> str:
        """Crea el prompt para conversaci√≥n del chatbot"""
        
        return f"""
Eres un asistente m√©dico virtual amigable y emp√°tico que ayuda a pacientes a entender sus ex√°menes de sangre.

CONTEXTO DEL PACIENTE:
- Edad: {user_data.get('age')} a√±os
- G√©nero: {user_data.get('gender')}

√öLTIMOS RESULTADOS DE EXAMEN:
- Glucosa: {blood_test_data.get('glucose')} mg/dL
- Colesterol total: {blood_test_data.get('cholesterol')} mg/dL
- Riesgo general: {analysis.get('overall_risk')}
- Necesita consulta m√©dica: {'S√≠' if analysis.get('needs_doctor_consultation') else 'No'}

PREGUNTA/MENSAJE DEL PACIENTE:
"{user_message}"

INSTRUCCIONES:
1. Responde de manera emp√°tica y comprensible
2. Usa los datos del examen para contextualizar tu respuesta
3. Si el usuario pregunta sobre valores espec√≠ficos, expl√≠calos claramente
4. Si detectas preocupaci√≥n o ansiedad, tranquiliza apropiadamente
5. Siempre recuerda que no reemplazas una consulta m√©dica profesional
6. Si los resultados sugieren riesgo alto, recomienda consultar un m√©dico
7. Responde en espa√±ol
8. Mant√©n respuestas concisas pero informativas
9. Si el usuario pregunta sobre s√≠ntomas o tratamientos espec√≠ficos, recomienda consultar un profesional

Proporciona una respuesta √∫til y emp√°tica.
"""
